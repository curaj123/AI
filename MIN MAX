def minimax(board, depth, is_maximizing):
    if check_winner(board, 'X'):
        return -1
    if check_winner(board, 'O'):
        return 1
    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = float('-inf')
        for move in get_available_moves(board):
            board[move] = 'O'
            score = minimax(board, depth + 1, False)
            board[move] = ' '
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for move in get_available_moves(board):
            board[move] = 'X'
            score = minimax(board, depth + 1, True)
            board[move] = ' '
            best_score = min(score, best_score)
        return best_score

def check_winner(board, player):
    win_conditions = [
        [board[0], board[1], board[2]],
        [board[3], board[4], board[5]],
        [board[6], board[7], board[8]],
        [board[0], board[3], board[6]],
        [board[1], board[4], board[7]],
        [board[2], board[5], board[8]],
        [board[0], board[4], board[8]],
        [board[2], board[4], board[6]]
    ]
    return [player, player, player] in win_conditions

def is_board_full(board):
    return ' ' not in board

def get_available_moves(board):
    return [i for i, spot in enumerate(board) if spot == ' ']

def print_board(board):
    for row in [board[i:i + 3] for i in range(0, len(board), 3)]:
        print('|'.join(row))
        print('-' * 5)

def main():
    board = [' ' for _ in range(9)]
    print_board(board)

    while True:
        move = int(input("Enter your move (0-8): "))
        if board[move] == ' ':
            board[move] = 'X'
            if check_winner(board, 'X'):
                print("You win!")
                break
            elif is_board_full(board):
                print("It's a tie!")
                break

            print("Computer's turn...")
            best_score = float('-inf')
            best_move = None
            for move in get_available_moves(board):
                board[move] = 'O'
                score = minimax(board, 0, False)
                board[move] = ' '
                if score > best_score:
                    best_score = score
                    best_move = move
            board[best_move] = 'O'
            print_board(board)

            if check_winner(board, 'O'):
                print("Computer wins!")
                break
            elif is_board_full(board):
                print("It's a tie!")
                break

if __name__ == "__main__":
    main()
